generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Company {
  id          String   @id @default(cuid())
  name        String   @unique @db.VarChar(255)
  slug        String   @unique @db.VarChar(100)
  description String?
  logoUrl     String?  @map("logo_url")
  website     String?
  settings    Json     @default("{}")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  projects         Project[]
  issues           Issue[]
  sprints          Sprint[]
  workflowMappings WorkflowMapping[]
  statusChanges    StatusChange[]

  @@index([isActive])
  @@index([createdAt])
  @@map("companies")
}

model Project {
  id        Int      @id @default(autoincrement())
  key       String   @db.VarChar(50)
  name      String   @db.VarChar(255)
  companyId String   @map("company_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  issues           Issue[]
  sprints          Sprint[]
  workflowMappings WorkflowMapping[]

  @@unique([companyId, key], name: "projects_company_key_unique")
  @@index([companyId])
  @@index([companyId, createdAt])
  @@map("projects")
}

model WorkflowMapping {
  id             Int     @id @default(autoincrement())
  projectId      Int     @map("project_id")
  companyId      String  @map("company_id")
  jiraStatusName String  @map("jira_status_name") @db.VarChar(200)
  canonicalStage String  @map("canonical_stage") @db.VarChar(50)

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, jiraStatusName])
  @@index([companyId])
  @@index([projectId])
  @@index([companyId, canonicalStage])
  @@map("workflow_mappings")
}

model Sprint {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  startDate DateTime? @map("start_date") @db.Timestamptz
  endDate   DateTime? @map("end_date") @db.Timestamptz
  projectId Int       @map("project_id")
  companyId String    @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations  
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issuesSprints IssuesSprints[]

  @@unique([companyId, name], name: "sprints_company_name_unique")
  @@index([companyId])
  @@index([projectId])
  @@index([companyId, startDate])
  @@map("sprints")
}

model Issue {
  id          Int       @id @default(autoincrement())
  jiraId      String    @map("jira_id") @db.VarChar(50)
  key         String    @db.VarChar(50)
  summary     String    @db.Text
  issueType   String    @map("issue_type") @db.VarChar(100)
  priority    String?   @db.VarChar(50)
  projectId   Int       @map("project_id")
  companyId   String    @map("company_id")
  storyPoints Int?      @map("story_points")
  parentKey   String?   @map("parent_key") @db.VarChar(50)
  webUrl      String?   @map("web_url") @db.Text
  created     DateTime  @db.Timestamptz
  resolved    DateTime? @db.Timestamptz
  rawData     Json      @map("raw_data") // Store complete JIRA JSON
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project       Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  statusChanges StatusChange[]
  issuesSprints IssuesSprints[]

  // Self-relation for parent/child issues (removed due to company-scoped uniqueness)
  // TODO: Implement parent/child relationships with company context
  // parent   Issue?  @relation("IssueHierarchy", fields: [parentKey], references: [key])
  // children Issue[] @relation("IssueHierarchy")

  @@unique([companyId, key], name: "issues_company_key_unique")
  @@unique([companyId, jiraId], name: "issues_company_jira_id_unique")
  @@index([companyId])
  @@index([projectId])
  @@index([companyId, created])
  @@index([companyId, resolved])
  @@index([companyId, issueType])
  @@index([companyId, priority])
  @@index([issueType])
  @@index([priority])
  @@index([created])
  @@index([resolved])
  @@index([storyPoints])
  @@index([parentKey])
  @@map("issues")
}

model StatusChange {
  id        Int      @id @default(autoincrement())
  issueId   Int      @map("issue_id")
  companyId String   @map("company_id")
  fieldName String   @map("field_name") @db.VarChar(255)
  fromValue String?  @map("from_value") @db.Text
  toValue   String?  @map("to_value") @db.Text
  changed   DateTime @db.Timestamptz // When the change occurred in JIRA
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  issue   Issue   @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([issueId])
  @@index([fieldName])
  @@index([changed])
  @@index([companyId, changed])
  // Note: Composite index with toValue is handled by raw SQL due to TEXT column size limits
  @@map("status_changes")
}

model IssuesSprints {
  issueId  Int @map("issue_id")
  sprintId Int @map("sprint_id")

  issue  Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)
  sprint Sprint @relation(fields: [sprintId], references: [id], onDelete: Cascade)

  @@id([issueId, sprintId])
  @@map("issues_sprints")
}